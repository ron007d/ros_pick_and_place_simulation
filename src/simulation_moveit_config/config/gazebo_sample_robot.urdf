<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from /home/ron/SECONDARY_SSD/Robot_OS/pick_place_simulation/src/simple_simulation/urdf/simple_robot_with_camera.xacro | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="sample_robot">
    <!-- adding the frame from which we can visualize the scene -->
    <link name="world" />
    <!--
    Base UR robot series xacro macro.

    NOTE: this is NOT a URDF. It cannot directly be loaded by consumers
    expecting a flattened '.urdf' file. See the top-level '.xacro' for that
    (but note: that .xacro must still be processed by the xacro command).

    For use in '.launch' files: use one of the 'load_urX.launch' convenience
    launch files.

    This file models the base kinematic chain of a UR robot, which then gets
    parameterised by various configuration files to convert it into a UR3(e),
    UR5(e), UR10(e) or UR16e.

    NOTE: the default kinematic parameters (ie: link lengths, frame locations,
    offets, etc) do not correspond to any particular robot. They are defaults
    only. There WILL be non-zero offsets between the Forward Kinematics results
    in TF (ie: robot_state_publisher) and the values reported by the Teach
    Pendant.

    For accurate (and robot-specific) transforms, the 'kinematics_parameters_file'
    parameter MUST point to a .yaml file containing the appropriate values for
    the targetted robot.

    If using the UniversalRobots/Universal_Robots_ROS_Driver, follow the steps
    described in the readme of that repository to extract the kinematic
    calibration from the controller and generate the required .yaml file.

    Main author of the migration to yaml configs: Ludovic Delval.

    Contributors to previous versions (in no particular order):

     - Felix Messmer
     - Kelsey Hawkins
     - Wim Meeussen
     - Shaun Edwards
     - Nadia Hammoudeh Garcia
     - Dave Hershberger
     - G. vd. Hoorn
     - Philip Long
     - Dave Coleman
     - Miguel Prada
     - Mathias Luedtke
     - Marcel Schnirring
     - Felix von Drigalski
     - Felix Exner
     - Jimmy Da Silva
     - Ajit Krisshna N L
     - Muhammad Asif Rana
  -->
    <!--
    NOTE: the macro defined in this file is NOT part of the public API of this
          package. Users CANNOT rely on this file being available, or stored in
          this location. Nor can they rely on the existence of the macro.
  -->
    <transmission name="robot1_shoulder_pan_trans">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="robot1_shoulder_pan_joint">
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
        </joint>
        <actuator name="robot1_shoulder_pan_motor">
            <mechanicalReduction>1</mechanicalReduction>
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
        </actuator>
    </transmission>
    <transmission name="robot1_shoulder_lift_trans">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="robot1_shoulder_lift_joint">
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
        </joint>
        <actuator name="robot1_shoulder_lift_motor">
            <mechanicalReduction>1</mechanicalReduction>
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
        </actuator>
    </transmission>
    <transmission name="robot1_elbow_trans">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="robot1_elbow_joint">
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
        </joint>
        <actuator name="robot1_elbow_motor">
            <mechanicalReduction>1</mechanicalReduction>
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
        </actuator>
    </transmission>
    <transmission name="robot1_wrist_1_trans">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="robot1_wrist_1_joint">
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
        </joint>
        <actuator name="robot1_wrist_1_motor">
            <mechanicalReduction>1</mechanicalReduction>
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
        </actuator>
    </transmission>
    <transmission name="robot1_wrist_2_trans">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="robot1_wrist_2_joint">
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
        </joint>
        <actuator name="robot1_wrist_2_motor">
            <mechanicalReduction>1</mechanicalReduction>
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
        </actuator>
    </transmission>
    <transmission name="robot1_wrist_3_trans">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="robot1_wrist_3_joint">
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
        </joint>
        <actuator name="robot1_wrist_3_motor">
            <mechanicalReduction>1</mechanicalReduction>
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
        </actuator>
    </transmission>
    <!-- links: main serial chain -->
    <link name="robot1_base_link" />
    <link name="robot1_base_link_inertia">
        <visual>
            <origin rpy="0 0 3.141592653589793" xyz="0 0 0" />
            <geometry>
                <mesh filename="package://ur_description/meshes/ur10e/visual/base.dae" />
            </geometry>
            <material name="LightGrey">
                <color rgba="0.7 0.7 0.7 1.0" />
            </material>
        </visual>
        <collision>
            <origin rpy="0 0 3.141592653589793" xyz="0 0 0" />
            <geometry>
                <mesh filename="package://ur_description/meshes/ur10e/collision/base.stl" />
            </geometry>
        </collision>
        <inertial>
            <mass value="4.0" />
            <origin rpy="0 0 0" xyz="0 0 0" />
            <inertia ixx="0.0061063308908" ixy="0.0" ixz="0.0" iyy="0.0061063308908" iyz="0.0" izz="0.01125" />
        </inertial>
    </link>
    <link name="robot1_shoulder_link">
        <visual>
            <origin rpy="0 0 3.141592653589793" xyz="0 0 0" />
            <geometry>
                <mesh filename="package://ur_description/meshes/ur10e/visual/shoulder.dae" />
            </geometry>
            <material name="LightGrey">
                <color rgba="0.7 0.7 0.7 1.0" />
            </material>
        </visual>
        <collision>
            <origin rpy="0 0 3.141592653589793" xyz="0 0 0" />
            <geometry>
                <mesh filename="package://ur_description/meshes/ur10e/collision/shoulder.stl" />
            </geometry>
        </collision>
        <inertial>
            <mass value="7.778" />
            <origin rpy="0 0 0" xyz="0 0 0" />
            <inertia ixx="0.03147431257693659" ixy="0.0" ixz="0.0" iyy="0.03147431257693659" iyz="0.0" izz="0.021875624999999996" />
        </inertial>
    </link>
    <link name="robot1_upper_arm_link">
        <visual>
            <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.1762" />
            <geometry>
                <mesh filename="package://ur_description/meshes/ur10e/visual/upperarm.dae" />
            </geometry>
            <material name="LightGrey">
                <color rgba="0.7 0.7 0.7 1.0" />
            </material>
        </visual>
        <collision>
            <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.1762" />
            <geometry>
                <mesh filename="package://ur_description/meshes/ur10e/collision/upperarm.stl" />
            </geometry>
        </collision>
        <inertial>
            <mass value="12.93" />
            <origin rpy="0 1.5707963267948966 0" xyz="-0.306 0.0 0.175" />
            <inertia ixx="0.42175380379841093" ixy="0.0" ixz="0.0" iyy="0.42175380379841093" iyz="0.0" izz="0.03636562499999999" />
        </inertial>
    </link>
    <link name="robot1_forearm_link">
        <visual>
            <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.0393" />
            <geometry>
                <mesh filename="package://ur_description/meshes/ur10e/visual/forearm.dae" />
            </geometry>
            <material name="LightGrey">
                <color rgba="0.7 0.7 0.7 1.0" />
            </material>
        </visual>
        <collision>
            <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.0393" />
            <geometry>
                <mesh filename="package://ur_description/meshes/ur10e/collision/forearm.stl" />
            </geometry>
        </collision>
        <inertial>
            <mass value="3.87" />
            <origin rpy="0 1.5707963267948966 0" xyz="-0.285775 0.0 0.0393" />
            <inertia ixx="0.11079302548902206" ixy="0.0" ixz="0.0" iyy="0.11079302548902206" iyz="0.0" izz="0.010884375" />
        </inertial>
    </link>
    <link name="robot1_wrist_1_link">
        <visual>
            <!-- TODO: Move this to a parameter -->
            <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.135" />
            <geometry>
                <mesh filename="package://ur_description/meshes/ur10e/visual/wrist1.dae" />
            </geometry>
            <material name="LightGrey">
                <color rgba="0.7 0.7 0.7 1.0" />
            </material>
        </visual>
        <collision>
            <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.135" />
            <geometry>
                <mesh filename="package://ur_description/meshes/ur10e/collision/wrist1.stl" />
            </geometry>
        </collision>
        <inertial>
            <mass value="1.96" />
            <origin rpy="0 0 0" xyz="0 0 0" />
            <inertia ixx="0.005108247956699999" ixy="0.0" ixz="0.0" iyy="0.005108247956699999" iyz="0.0" izz="0.005512499999999999" />
        </inertial>
    </link>
    <link name="robot1_wrist_2_link">
        <visual>
            <origin rpy="0 0 0" xyz="0 0 -0.12" />
            <geometry>
                <mesh filename="package://ur_description/meshes/ur10e/visual/wrist2.dae" />
            </geometry>
            <material name="LightGrey">
                <color rgba="0.7 0.7 0.7 1.0" />
            </material>
        </visual>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 -0.12" />
            <geometry>
                <mesh filename="package://ur_description/meshes/ur10e/collision/wrist2.stl" />
            </geometry>
        </collision>
        <inertial>
            <mass value="1.96" />
            <origin rpy="0 0 0" xyz="0 0 0" />
            <inertia ixx="0.005108247956699999" ixy="0.0" ixz="0.0" iyy="0.005108247956699999" iyz="0.0" izz="0.005512499999999999" />
        </inertial>
    </link>
    <link name="robot1_wrist_3_link">
        <visual>
            <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.1168" />
            <geometry>
                <mesh filename="package://ur_description/meshes/ur10e/visual/wrist3.dae" />
            </geometry>
            <material name="LightGrey">
                <color rgba="0.7 0.7 0.7 1.0" />
            </material>
        </visual>
        <collision>
            <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.1168" />
            <geometry>
                <mesh filename="package://ur_description/meshes/ur10e/collision/wrist3.stl" />
            </geometry>
        </collision>
        <inertial>
            <mass value="0.202" />
            <origin rpy="0 0 0" xyz="0.0 0.0 -0.025" />
            <inertia ixx="0.00014434577559500002" ixy="0.0" ixz="0.0" iyy="0.00014434577559500002" iyz="0.0" izz="0.00020452500000000002" />
        </inertial>
    </link>
    <!-- joints: main serial chain -->
    <joint name="robot1_base_link-base_link_inertia" type="fixed">
        <parent link="robot1_base_link" />
        <child link="robot1_base_link_inertia" />
        <!-- 'base_link' is REP-103 aligned (so X+ forward), while the internal
           frames of the robot/controller have X+ pointing backwards.
           Use the joint between 'base_link' and 'base_link_inertia' (a dummy
           link/frame) to introduce the necessary rotation over Z (of pi rad).
      -->
        <origin rpy="0 0 3.141592653589793" xyz="0 0 0" />
    </joint>
    <joint name="robot1_shoulder_pan_joint" type="revolute">
        <parent link="robot1_base_link_inertia" />
        <child link="robot1_shoulder_link" />
        <origin rpy="0 0 0" xyz="0 0 0.1807" />
        <axis xyz="0 0 1" />
        <limit effort="330.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="2.0943951023931953" />
        <dynamics damping="0" friction="0" />
    </joint>
    <joint name="robot1_shoulder_lift_joint" type="revolute">
        <parent link="robot1_shoulder_link" />
        <child link="robot1_upper_arm_link" />
        <origin rpy="1.570796327 0 0" xyz="0 0 0" />
        <axis xyz="0 0 1" />
        <limit effort="330.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="2.0943951023931953" />
        <dynamics damping="0" friction="0" />
    </joint>
    <joint name="robot1_elbow_joint" type="revolute">
        <parent link="robot1_upper_arm_link" />
        <child link="robot1_forearm_link" />
        <origin rpy="0 0 0" xyz="-0.6127 0 0" />
        <axis xyz="0 0 1" />
        <limit effort="150.0" lower="-3.141592653589793" upper="3.141592653589793" velocity="3.141592653589793" />
        <dynamics damping="0" friction="0" />
    </joint>
    <joint name="robot1_wrist_1_joint" type="revolute">
        <parent link="robot1_forearm_link" />
        <child link="robot1_wrist_1_link" />
        <origin rpy="0 0 0" xyz="-0.57155 0 0.17415" />
        <axis xyz="0 0 1" />
        <limit effort="56.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="3.141592653589793" />
        <dynamics damping="0" friction="0" />
    </joint>
    <joint name="robot1_wrist_2_joint" type="revolute">
        <parent link="robot1_wrist_1_link" />
        <child link="robot1_wrist_2_link" />
        <origin rpy="1.570796327 0 0" xyz="0 -0.11985 -2.458164590756244e-11" />
        <axis xyz="0 0 1" />
        <limit effort="56.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="3.141592653589793" />
        <dynamics damping="0" friction="0" />
    </joint>
    <joint name="robot1_wrist_3_joint" type="revolute">
        <parent link="robot1_wrist_2_link" />
        <child link="robot1_wrist_3_link" />
        <origin rpy="1.570796326589793 3.141592653589793 3.141592653589793" xyz="0 0.11655 -2.390480459346185e-11" />
        <axis xyz="0 0 1" />
        <limit effort="56.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="3.141592653589793" />
        <dynamics damping="0" friction="0" />
    </joint>
    <!-- ROS-Industrial 'base' frame: base_link to UR 'Base' Coordinates transform -->
    <link name="robot1_base" />
    <joint name="robot1_base_link-base_fixed_joint" type="fixed">
        <!-- Note the rotation over Z of pi radians: as base_link is REP-103
           aligned (ie: has X+ forward, Y+ left and Z+ up), this is needed
           to correctly align 'base' with the 'Base' coordinate system of
           the UR controller.
      -->
        <origin rpy="0 0 3.141592653589793" xyz="0 0 0" />
        <parent link="robot1_base_link" />
        <child link="robot1_base" />
    </joint>
    <!-- ROS-Industrial 'flange' frame: attachment point for EEF models -->
    <link name="robot1_flange" />
    <joint name="robot1_wrist_3-flange" type="fixed">
        <parent link="robot1_wrist_3_link" />
        <child link="robot1_flange" />
        <origin rpy="0 -1.5707963267948966 -1.5707963267948966" xyz="0 0 0" />
    </joint>
    <!-- ROS-Industrial 'tool0' frame: all-zeros tool frame -->
    <link name="robot1_tool0" />
    <joint name="robot1_flange-tool0" type="fixed">
        <!-- default toolframe: X+ left, Y+ up, Z+ front -->
        <origin rpy="1.5707963267948966 0 1.5707963267948966" xyz="0 0 0" />
        <parent link="robot1_flange" />
        <child link="robot1_tool0" />
    </joint>
    <!-- Adding gripper to robot1 -->
    <!-- Franka Gripper -->
    <joint name="robot1_arm_hand_joint" type="fixed">
        <parent link="robot1_tool0" />
        <child link="robot1_arm_hand" />
        <origin rpy="0 0 0" xyz="0 0 0" />
    </joint>
    <!-- sub-link defining detailed meshes for collision with environment -->
    <link name="robot1_arm_hand">
        <visual>
            <geometry>
                <mesh filename="package://franka_description/meshes/visual/hand.dae" />
            </geometry>
        </visual>
        <collision>
            <geometry>
                <mesh filename="package://franka_description/meshes/collision/hand.stl" />
            </geometry>
        </collision>
        <inertial>
            <origin rpy="0 0 0" xyz="-0.01 0 0.03" />
            <mass value="0.73" />
            <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.0025" iyz="0" izz="0.0017" />
        </inertial>
    </link>
    <!-- sub-link defining coarse geometries of real robot's internal self-collision -->
    <link name="robot1_arm_hand_sc" />
    <!-- fixed joint between both sub-links -->
    <joint name="robot1_arm_hand_sc_joint" type="fixed">
        <origin rpy="0 0 0" />
        <parent link="robot1_arm_hand" />
        <child link="robot1_arm_hand_sc" />
    </joint>
    <!-- Define the hand_tcp frame -->
    <link name="robot1_arm_hand_tcp" />
    <joint name="robot1_arm_hand_tcp_joint" type="fixed">
        <origin rpy="0 0 0" xyz="0 0 0.1034" />
        <parent link="robot1_arm_hand" />
        <child link="robot1_arm_hand_tcp" />
    </joint>
    <link name="robot1_arm_leftfinger">
        <visual>
            <geometry>
                <mesh filename="package://franka_description/meshes/visual/finger.dae" />
            </geometry>
        </visual>
        <!-- screw mount -->
        <collision>
            <origin rpy="0 0 0" xyz="0 18.5e-3 11e-3" />
            <geometry>
                <box size="22e-3 15e-3 20e-3" />
            </geometry>
        </collision>
        <!-- cartriage sledge -->
        <collision>
            <origin rpy="0 0 0" xyz="0 6.8e-3 2.2e-3" />
            <geometry>
                <box size="22e-3 8.8e-3 3.8e-3" />
            </geometry>
        </collision>
        <!-- diagonal finger -->
        <collision>
            <origin rpy="0.5235987755982988 0 0" xyz="0 15.9e-3 28.35e-3" />
            <geometry>
                <box size="17.5e-3 7e-3 23.5e-3" />
            </geometry>
        </collision>
        <!-- rubber tip with which to grasp -->
        <collision>
            <origin rpy="0 0 0" xyz="0 7.58e-3 45.25e-3" />
            <geometry>
                <box size="17.5e-3 15.2e-3 18.5e-3" />
            </geometry>
        </collision>
        <inertial>
            <origin rpy="0 0 0" xyz="0 0 0" />
            <mass value="0.015" />
            <inertia ixx="2.3749999999999997e-06" ixy="0" ixz="0" iyy="2.3749999999999997e-06" iyz="0" izz="7.5e-07" />
        </inertial>
    </link>
    <link name="robot1_arm_rightfinger">
        <visual>
            <origin rpy="0 0 3.141592653589793" xyz="0 0 0" />
            <geometry>
                <mesh filename="package://franka_description/meshes/visual/finger.dae" />
            </geometry>
        </visual>
        <!-- screw mount -->
        <collision>
            <origin rpy="0 0 0" xyz="0 -18.5e-3 11e-3" />
            <geometry>
                <box size="22e-3 15e-3 20e-3" />
            </geometry>
        </collision>
        <!-- cartriage sledge -->
        <collision>
            <origin rpy="0 0 0" xyz="0 -6.8e-3 2.2e-3" />
            <geometry>
                <box size="22e-3 8.8e-3 3.8e-3" />
            </geometry>
        </collision>
        <!-- diagonal finger -->
        <collision>
            <origin rpy="-0.5235987755982988 0 0" xyz="0 -15.9e-3 28.35e-3" />
            <geometry>
                <box size="17.5e-3 7e-3 23.5e-3" />
            </geometry>
        </collision>
        <!-- rubber tip with which to grasp -->
        <collision>
            <origin rpy="0 0 0" xyz="0 -7.58e-3 45.25e-3" />
            <geometry>
                <box size="17.5e-3 15.2e-3 18.5e-3" />
            </geometry>
        </collision>
        <inertial>
            <origin rpy="0 0 0" xyz="0 0 0" />
            <mass value="0.015" />
            <inertia ixx="2.3749999999999997e-06" ixy="0" ixz="0" iyy="2.3749999999999997e-06" iyz="0" izz="7.5e-07" />
        </inertial>
    </link>
    <joint name="robot1_arm_finger_joint1" type="prismatic">
        <parent link="robot1_arm_hand" />
        <child link="robot1_arm_leftfinger" />
        <origin rpy="0 0 0" xyz="0 0 0.0584" />
        <axis xyz="0 1 0" />
        <limit effort="100" lower="0.0" upper="0.04" velocity="0.2" />
        <dynamics damping="0.3" />
    </joint>
    <joint name="robot1_arm_finger_joint2" type="prismatic">
        <parent link="robot1_arm_hand" />
        <child link="robot1_arm_rightfinger" />
        <origin rpy="0 0 0" xyz="0 0 0.0584" />
        <axis xyz="0 -1 0" />
        <limit effort="100" lower="0.0" upper="0.04" velocity="0.2" />
        <mimic joint="robot1_arm_finger_joint1" />
        <dynamics damping="0.3" />
    </joint>
    <!-- Joint to world -->
    <joint name="robot1_joint" type="fixed">
        <parent link="world" />
        <child link="robot1_base_link" />
        <origin rpy="0 0 0" xyz="0 0 0.75" />
    </joint>
    <!-- Adding table on which the object will be staying -->
    <link name="table">
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0" />
            <geometry>
                <box size="1.0 1.0 0.75" />
            </geometry>
            <material name="Grey">
                <color rgba="0.7 0.7 0.7 1.0" />
            </material>
        </visual>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 0" />
            <geometry>
                <box size="1.0 1.0 0.75" />
            </geometry>
        </collision>
        <inertial>
            <mass value="500" />
            <origin rpy="0 0 0" xyz="0 0 0" />
            <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001" />
        </inertial>
    </link>
    <!-- changing the table color -->
    <gazebo reference="table">
        <material>Gazebo/Black</material>
        <!-- <transparency>1.0</transparency> -->
        <plugin name="gazebo_ros_control">
            <robotNamespace>/</robotNamespace>
        </plugin>
    </gazebo>
    <joint name="table_to_world" type="fixed">
        <parent link="world" />
        <child link="table" />
        <origin rpy="0.0 0.0 0.0" xyz="0.0 0.6 0.375" />
    </joint>
    <!-- Adding camera  -->
    <!-- Currently camera is just a simple box. Mesh can be used to make it look more realistic -->
    <link name="camera_link">
        <visual>
            <geometry>
                <box size="0.1 0.1 0.1" />
            </geometry>
            <material name="LightGrey">
                <color rgba="0.7 0.7 0.7 1.0" />
            </material>
        </visual>
        <collision>
            <geometry>
                <box size="0.1 0.1 0.1" />
            </geometry>
        </collision>
        <inertial>
            <mass value="1.0" />
            <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0" />
            <inertia ixx="0.01" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.001" />
        </inertial>
    </link>
    <joint name="camera_to_world" type="fixed">
        <parent link="world" />
        <child link="camera_link" />
        <origin rpy="0.0 0.0 0.0" xyz="0.0 0.6 1.75" />
    </joint>
    <link name="camera_link_optical" />
    <joint name="camera_link_to_optic" type="fixed">
        <parent link="camera_link" />
        <child link="camera_link_optical" />
        <origin rpy="0 0 0" xyz="0.0 0.0 0.0" />
    </joint>
    <!-- Adding simple ground plane -->
    <link name="plane">
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0" />
            <geometry>
                <box size="1.0 1.0 0.009" />
            </geometry>
            <material name="Grey">
                <color rgba="0.7 0.7 0.7 0.0" />
            </material>
        </visual>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 0" />
            <geometry>
                <box size="1.0 1.0 0.009" />
            </geometry>
        </collision>
        <inertial>
            <mass value="500" />
            <origin rpy="0 0 0" xyz="0 0 0" />
            <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001" />
        </inertial>
    </link>
    <gazebo reference="plane">
        <!-- <material>Gazebo/Blue</material> -->
        <transparency>1.0</transparency>
    </gazebo>
    <joint name="ground_plane_box_joint" type="fixed">
        <parent link="world" />
        <child link="plane" />
        <origin rpy="0 0 0" xyz="0 -0.5 0.0045" />
    </joint>
    <!-- camera -->
    <gazebo reference="camera_link">
        <sensor name="camera1" type="camera">
            <pose>0 0 0 0 1.5708 1.5708</pose>
            <update_rate>30.0</update_rate>
            <visualize>true</visualize>
            <camera name="head">
                <horizontal_fov>1.1</horizontal_fov>
                <image>
                    <width>800</width>
                    <height>800</height>
                    <format>R8G8B8</format>
                </image>
                <clip>
                    <near>0.02</near>
                    <far>300</far>
                </clip>
                <noise>
                    <type>gaussian</type>
                    <!-- Noise is sampled independently per pixel on each frame.
                That pixel's noise value is added to each of its color
                channels, which at that point lie in the range [0,1]. -->
                    <mean>0.0</mean>
                    <stddev>0.007</stddev>
                </noise>
            </camera>
            <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
                <alwaysOn>true</alwaysOn>
                <updateRate>0.0</updateRate>
                <cameraName>camera1</cameraName>
                <imageTopicName>image_raw</imageTopicName>
                <cameraInfoTopicName>camera_info</cameraInfoTopicName>
                <frameName>camera_link_optical</frameName>
                <!-- setting hackBaseline to anything but 0.0 will cause a misalignment
            between the gazebo sensor image and the frame it is supposed to
            be attached to -->
                <hackBaseline>0.0</hackBaseline>
                <distortionK1>0.0</distortionK1>
                <distortionK2>0.0</distortionK2>
                <distortionK3>0.0</distortionK3>
                <distortionT1>0.0</distortionT1>
                <distortionT2>0.0</distortionT2>
                <CxPrime>0</CxPrime>
                <Cx>0.0</Cx>
                <Cy>0.0</Cy>
                <focalLength>0.0</focalLength>
            </plugin>
        </sensor>
    </gazebo>
    <!-- Adding gazebo ros control so that moveit configuration can work with gazebo simulation -->
    <gazebo>
        <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control">
            <robotNamespace>/</robotNamespace>
        </plugin>
    </gazebo>
    <!-- The ROS noeitc has a error while picking up objects a gazebo plugin is a fix -->
    <gazebo>
        <plugin filename="libgazebo_grasp_fix.so" name="gazebo_grasp_fix">
            <arm>
                <arm_name>robot1</arm_name>
                <palm_link>robot1_wrist_3_link</palm_link>
                <gripper_link>robot1_arm_leftfinger</gripper_link>
                <gripper_link>robot1_arm_rightfinger</gripper_link>
            </arm>
            <forces_angle_tolerance>100</forces_angle_tolerance>
            <update_rate>4</update_rate>
            <grip_count_threshold>4</grip_count_threshold>
            <max_grip_count>8</max_grip_count>
            <release_tolerance>0.005</release_tolerance>
            <disable_collisions_on_attach>false</disable_collisions_on_attach>
            <contact_topic>__default_topic__</contact_topic>
        </plugin>
    </gazebo>

    <gazebo>
        <plugin filename="libroboticsgroup_upatras_gazebo_mimic_joint_plugin.so" name="robot1_arm_finger_joint2mimic_joint_plugin">
            <joint>robot1_arm_finger_joint1</joint>
            <mimicJoint>robot1_arm_finger_joint2</mimicJoint>
            <!-- if set to true, PID parameters from "/gazebo_ros_control/pid_gains/${mimic_joint}" are loaded -->
            <!-- <hasPID/> -->
            <multiplier>1.0</multiplier>
            <offset>0</offset>
            <sensitiveness>0.0</sensitiveness>
            <!-- if absolute difference between setpoint and process value is below this threshold, do nothing; 0.0 = disable [rad] -->
            <maxEffort>10.0</maxEffort>
        </plugin>
    </gazebo>
    

    <transmission name="trans_robot1_arm_finger_joint1">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="robot1_arm_finger_joint1">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        </joint>
        <actuator name="robot1_arm_finger_joint1_motor">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
    </transmission>
    <transmission name="trans_robot1_arm_finger_joint2">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="robot1_arm_finger_joint2">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        </joint>
        <actuator name="robot1_arm_finger_joint2_motor">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
    </transmission>
</robot>

