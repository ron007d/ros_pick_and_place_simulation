<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="sample_robot">
    
    <!-- adding the frame from which we can visualize the scene -->
    <link name="world"/>
    

    <!-- Adding UR10 Robot -->
    <!-- Added using robot macro -->
    <xacro:include filename="$(find ur_description)/urdf/inc/ur10e_macro.xacro"/>
    <xacro:ur10e_robot prefix="robot1_"/>

    <!-- Adding gripper to robot1 -->
    <!-- Franka Gripper -->

    <xacro:include filename="$(find franka_description)/robots/common/utils.xacro"/>
    <xacro:include filename="$(find franka_description)/robots/common/franka_hand.xacro"/>
    <xacro:franka_hand connected_to="robot1_tool0" arm_id="robot1_arm" gazebo="true"/>

    <!-- Joint to world -->
    <joint name="robot1_joint" type = "fixed">
        <parent link ="world"/>
        <child link = "robot1_base_link"/>
        <origin xyz="0 0 0.75" rpy="0 0 0"/>
    </joint>


    <!-- Adding table on which the object will be staying -->
    <link name="table">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="1.0 1.0 0.75"/> 
            </geometry>
            <material name="Grey">
                <color rgba="0.7 0.7 0.7 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="1.0 1.0 0.75"/> 
            </geometry>
        </collision>
        <inertial>
            <mass value="500"/>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
        </inertial>
    </link>

    <!-- changing the table color -->
    <gazebo reference="table">
        <material>Gazebo/Black</material>
        <!-- <transparency>1.0</transparency> -->
    </gazebo>

    <joint name="table_to_world" type="fixed">
        <parent link="world"/>
        <child link="table"/>
        <origin xyz="0.0 0.6 0.375" rpy="0.0 0.0 0.0"/>
    </joint>
    


    <!-- Adding camera  -->
    <!-- Currently camera is just a simple box. Mesh can be used to make it look more realistic -->
    <link name="camera_link">
        <visual>
            <geometry>
                <box size="0.1 0.1 0.1" />
            </geometry>
            <material name="LightGrey">
                <color rgba="0.7 0.7 0.7 1.0"/>
            </material>
        </visual>
        <collision>
            <geometry>
                <box size="0.1 0.1 0.1" />
            </geometry>
        </collision>
        <inertial>
            <mass value="1.0"/>
            <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
            <inertia ixx="0.01" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.001"/>
        </inertial>
    </link>        
    
    <joint name="camera_to_world" type="fixed">
        <parent link="world"/>
        <child link="camera_link"/>
        <origin xyz="0.0 0.6 1.75" rpy="0.0 0.0 0.0"/>
    </joint>
    <link name="camera_link_optical">
    </link>
    <joint name="camera_link_to_optic" type="fixed">
        <parent link="camera_link"/>
        <child link="camera_link_optical"/>
        <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
    </joint>

    <!-- Adding simple ground plane -->
    <link name="plane">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="1.0 1.0 0.009"/> 
            </geometry>
            <material name="Grey">
                <color rgba="0.7 0.7 0.7 0.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="1.0 1.0 0.009"/> 
            </geometry>
        </collision>
        <inertial>
            <mass value="500"/>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
        </inertial>
    </link>
    <gazebo reference="plane">
        <!-- <material>Gazebo/Blue</material> -->
        <transparency>1.0</transparency>
    </gazebo>
    <joint name="ground_plane_box_joint" type="fixed">
        <parent link="world" />
        <child link="plane" />
        <origin xyz="0 -0.5 0.0045" rpy="0 0 0" />
    </joint>
    <!-- camera -->
    <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
        <pose>0 0 0 0 1.5708 1.5708</pose>
        <update_rate>30.0</update_rate>
        <visualize>true</visualize>
        <camera name="head">
        <horizontal_fov>1.1</horizontal_fov>
        <image>
            <width>800</width>
            <height>800</height>
            <format>R8G8B8</format>
        </image>
        <clip>
            <near>0.02</near>
            <far>300</far>
        </clip>
        <noise>
            <type>gaussian</type>
            <!-- Noise is sampled independently per pixel on each frame.
                That pixel's noise value is added to each of its color
                channels, which at that point lie in the range [0,1]. -->
            <mean>0.0</mean>
            <stddev>0.007</stddev>
        </noise>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link_optical</frameName>
        <!-- setting hackBaseline to anything but 0.0 will cause a misalignment
            between the gazebo sensor image and the frame it is supposed to
            be attached to -->
        <hackBaseline>0.0</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0.0</Cx>
        <Cy>0.0</Cy>
        <focalLength>0.0</focalLength>
        </plugin>
    </sensor>
    </gazebo>
    
    <!-- Adding gazebo ros control so that moveit configuration can work with gazebo simulation -->
    <gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <robotNamespace>/</robotNamespace>
        </plugin>
    </gazebo>


    <!-- The ROS noeitc has a error while picking up objects a gazebo plugin is a fix -->
    <gazebo>
        <plugin name="gazebo_grasp_fix" filename="libgazebo_grasp_fix.so">
            <arm>
                <arm_name>robot1</arm_name>
                <palm_link>robot1_wrist_3_link</palm_link>
                <gripper_link>robot1_arm_leftfinger</gripper_link>
                <gripper_link>robot1_arm_rightfinger</gripper_link>
            </arm>
            <forces_angle_tolerance>100</forces_angle_tolerance>
            <update_rate>4</update_rate>
            <grip_count_threshold>4</grip_count_threshold>
            <max_grip_count>8</max_grip_count>
            <release_tolerance>0.005</release_tolerance>
            <disable_collisions_on_attach>false</disable_collisions_on_attach>
            <contact_topic>__default_topic__</contact_topic>
        </plugin>
    </gazebo>
</robot>